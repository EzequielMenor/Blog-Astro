---
import { getCollection, getEntry } from 'astro:content'; // Asegúrate de importar getEntry
import Layout from '../../layouts/Layout.astro'; // Ajusta la ruta a tu Layout si es diferente

export async function getStaticPaths() {
	const blogEntries = await getCollection('blog');

	return blogEntries.map((entry) => {
		return {
			// Para un catch-all route ([...slug]), params.slug DEBE ser un ARRAY de segmentos.
			// La forma más simple es usar el slug de la entrada directamente, envuelto en un array.
			// Si entry.slug es "mi-primer-post", params.slug será ["mi-primer-post"].
			// Si entry.slug fuera "categoria/mi-post", params.slug será ["categoria", "mi-post"].
			params: { slug: entry.slug.split('/') }, // <-- Mantenemos este, es el correcto para `[...slug]`
			// No necesitamos pasar 'entry' en props aquí, lo buscaremos de nuevo en el componente.
		};
	});
}

// Obtener los parámetros de la URL (Astro.params)
const { slug } = Astro.params;

// Reconstruir el slug en una cadena simple para getEntry
// Si Astro.params.slug es ['mi-primer-post'], slugToFind será 'mi-primer-post'.
// Si Astro.params.slug es ['categoria', 'mi-post'], slugToFind será 'categoria/mi-post'.
const slugToFind = Array.isArray(slug) ? slug.join('/') : slug;

// ¡Buscar la entrada del blog usando el slug reconstruido!
// getEntry() espera el "collection", y el "slug" (que es el ID de la entrada).
const entry = await getEntry('blog', slugToFind);

// Si el post no se encuentra, devolvemos una respuesta 404.
if (!entry) {
	return new Response('Post no encontrado.', {
		status: 404,
		headers: {
			'Content-Type': 'text/plain; charset=utf-8',
		},
	});
}

// Renderizar el contenido Markdown del post
const { Content } = await entry.render();
---

<Layout title={entry.data.title}>
	<article class='prose lg:prose-xl mx-auto py-8 px-4'>
		<h1 class='text-4xl font-bold mb-4'>{entry.data.title}</h1>
		<p class='text-gray-600 text-sm mb-6'>
			Publicado el: {entry.data.pubDate.toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' })}
			por {entry.data.author}
		</p>
		{entry.data.heroImage && <img src={entry.data.heroImage} alt={entry.data.title} class='w-full h-auto object-cover rounded-lg mb-6 max-h-96' />}
		<Content />

		{
			entry.data.tags && entry.data.tags.length > 0 && (
				<div class='mt-8'>
					<h3 class='text-xl font-semibold mb-2'>Etiquetas:</h3>
					<div class='flex flex-wrap gap-2'>
						{entry.data.tags.map((tag) => (
							<span class='bg-blue-100 text-blue-800 text-xs font-semibold px-2.5 py-0.5 rounded dark:bg-blue-200 dark:text-blue-800'>{tag}</span>
						))}
					</div>
				</div>
			)
		}
	</article>
</Layout>
